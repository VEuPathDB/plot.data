% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-plotdata-line.R
\name{lineplot}
\alias{lineplot}
\title{Line Plot data file}
\usage{
lineplot(
  data,
  variables,
  binWidth = NULL,
  value = c("mean", "median", "geometricMean", "proportion"),
  errorBars = c(TRUE, FALSE),
  viewport = NULL,
  numeratorValues = NULL,
  denominatorValues = NULL,
  evilMode = c("noVariables", "allVariables", "strataVariables"),
  collectionVariablePlotRef = NULL,
  computedVariableMetadata = NULL,
  verbose = c(TRUE, FALSE)
)
}
\arguments{
\item{data}{data.frame to make plot-ready data for}

\item{variables}{veupathUtils::VariableMetadataList
and its position in the plot. Recognized plotRef values are 'xAxisVariable', 'yAxisVariable', 
'overlayVariable', 'facetVariable1' and 'facetVariable2'}

\item{binWidth}{numeric value indicating width of bins, character (ex: 'year') if xaxis is a date}

\item{value}{character indicating whether to calculate 'mean', 'median', 'geometricMean', 'proportion' for y-axis}

\item{errorBars}{boolean indicating if we want 95% confidence intervals per x-axis tick}

\item{viewport}{List of min and max values to consider as the range of data}

\item{numeratorValues}{character vector of values from the y-axis variable to consider the numerator}

\item{denominatorValues}{character vector of values from the y-axis variable to consider the denominator}

\item{evilMode}{String indicating how evil this plot is ('strataVariables', 'allVariables', 'noVariables')}

\item{collectionVariablePlotRef}{string indicating the plotRef to be considered as a collectionVariable. 
Accepted values are 'overlayVariable' and 'facetVariable1'. Required whenever a set of variables 
should be interpreted as a collectionVariable.}

\item{computedVariableMetadata}{named list containing metadata about a computed variable(s) involved in a plot. 
Metadata can include 'displayName', 'displayRangeMin', 'displayRangeMax', and 'collectionVariable'. Will be included as an attribute of the returned plot object.}

\item{verbose}{boolean indicating if timed logging is desired}
}
\value{
character name of json file containing plot-ready data
}
\description{
This function returns the name of a json file containing 
plot-ready data with one row per group (per panel). Columns 
'seriesX' and 'seriesY' contain the raw data for the 
line plot. Column 'group' and 'panel' specify the group the 
series data belongs to.
}
\section{Evil Mode}{

An `evilMode` exists. It will do the following: \cr
- when `strataVariables` it will return 'no data' as a regular value for strata vars but will discard such cases for the axes vars. \cr
- when `allVariables` it will return 'no data' as a regular value for all variables. \cr
- when `noVariables` it will do the sensible thing and return complete cases only. \cr
- not return statsTables \cr
- allow smoothed means and agg values etc over axes values where we have no data for 
the strata vars \cr
- return a total count of plotted incomplete cases \cr
- represent missingness poorly, conflate the stories of completeness and missingness, 
mislead you and steal your soul \cr
}

\examples{
# Construct example data
df <- data.table('entity.xvar' = sample(1:20, 100, replace=T),
                 'entity.yvar' = rnorm(100), stringsAsFactors = F)

# Create VariableMetadataList that specifies variable role in the plot and supplies variable metadata
variables <- new("VariableMetadataList",
  new("VariableMetadata",
    variableClass = new("VariableClass", value = 'native'),
    variableSpec = new("VariableSpec", variableId = 'xvar', entityId = 'entity'),
    plotReference = new("PlotReference", value = 'xAxis'),
    dataType = new("DataType", value = 'NUMBER'),
    dataShape = new("DataShape", value = 'CONTINUOUS')
  ),
  new("VariableMetadata",
    variableClass = new("VariableClass", value = 'native'),
    variableSpec = new("VariableSpec", variableId = 'yvar', entityId = 'entity'),
    plotReference = new("PlotReference", value = 'yAxis'),
    dataType = new("DataType", value = 'NUMBER'),
    dataShape = new("DataShape", value = 'CONTINUOUS')
  )
)

# Returns the name of a json file
lineplot(df, map, value = 'median')
}
