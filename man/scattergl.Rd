% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-plotdata-scatter.R
\name{scattergl}
\alias{scattergl}
\title{Scatter Plot data file}
\usage{
scattergl(
  data,
  map,
  value = c("smoothedMean", "smoothedMeanWithRaw", "bestFitLineWithRaw", "density",
    "raw"),
  evilMode = c(FALSE, TRUE),
  listVarPlotRef = NULL,
  listVarDisplayLabel = NULL,
  inferredVarDisplayLabel = NULL,
  verbose = c(TRUE, FALSE)
)
}
\arguments{
\item{data}{data.frame to make plot-ready data for}

\item{map}{data.frame with at least two columns (id, plotRef) indicating a variable sourceId 
and its position in the plot. Recognized plotRef values are 'xAxisVariable', 'yAxisVariable', 
'overlayVariable', 'facetVariable1' and 'facetVariable2'}

\item{value}{character indicating whether to calculate 'smoothedMean', 'bestFitLineWithRaw' or 
'density' estimates (no raw data returned), alternatively 'smoothedMeanWithRaw' to include raw 
data with smoothed mean. Note only 'raw' is compatible with a continuous overlay variable.}

\item{evilMode}{boolean indicating whether to represent missingness in evil mode.}

\item{listVarPlotRef}{string indicating the plotRef to be considered as a listVariable. 
Accepted values are 'overlayVariable' and 'facetVariable1'. Required whenever a set of variables 
should be interpreted as a listVariable.}

\item{listVarDisplayLabel}{string indicating the final displayLabel to be assigned to 
the repeated variable.}

\item{inferredVarDisplayLabel}{string indicated the final displayLabel to be assigned 
to the inferred variable.}

\item{verbose}{boolean indicating if timed logging is desired}
}
\value{
character name of json file containing plot-ready data
}
\description{
This function returns the name of a json file containing 
plot-ready data with one row per group (per panel). Columns 
'seriesX' and 'seriesY' contain the raw data for the 
scatter plot. Column 'group' and 'panel' specify the group the 
series data belongs to. Optionally, columns 'smoothedMeanX', 
'smoothedMeanY' and 'smoothedMeanSE' specify the x, y and 
standard error respectively of the smoothed conditional mean 
for the group. Columns 'densityX' and 'densityY' contain the 
calculated kernel density estimates. Column 
'seriesGradientColorscale' contains values to be used with a 
gradient colorscale when plotting.
}
\section{Evil Mode}{

An `evilMode` exists. It will do the following: \cr
- return 'No data' as a regular value for strata vars but will discard incomplete 
cases for the axes vars \cr
- not return statsTables \cr
- allow smoothed means and agg values etc over axes values where we have no data for 
the strata vars \cr
- return a total count of plotted incomplete cases \cr
- represent missingness poorly, conflate the stories of completeness and missingness, 
mislead you and steal your soul \cr
}

\section{Map Structure}{

The 'map' associates columns in the data with plot elements, as well as passes information about each variable relevant for plotting. Specifically, the `map` argument is a data.frame with the following columns: \cr
- id: the variable name. Must match column name in the data exactly. \cr
- plotRef: The plot element to which that variable will be mapped. Options are 'xAxisVariable', 'yAxisVariable', 'zAxisVariable', 'overlayVariable', 'facetVariable1', 'facetVariable2'.  \cr
- dataType: Options are 'NUMBER', 'INTEGER', 'STRING', or 'DATE'. Optional. \cr
- dataShape: Options are 'CONTINUOUS', 'CATEGORICAL', 'ORDINAL', 'BINARY. Optional. \cr
}

\examples{
# Construct example data
df <- data.table('xvar' = rnorm(100),
                 'yvar' = rnorm(100),
                 'overlay' = sample(c('red','green','blue'), 100, replace=T), stringsAsFactors = F)

# Create map that specifies variable role in the plot and supplies variable metadata
map <- data.frame('id' = c('xvar', 'yvar', 'overlay'),
                 'plotRef' = c('xAxisVariable', 'yAxisVariable', 'overlayVariable'),
                 'dataType' = c('NUMBER', 'NUMBER', 'STRING'),
                 'dataShape' = c('CONTINUOUT', 'CONTINUOUS', 'CATEGORICAL'), stringsAsFactors=FALSE)

# Returns the name of a json file
scattergl(df, map, value = 'bestFitLineWithRaw')
}
