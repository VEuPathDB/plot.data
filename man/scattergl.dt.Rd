% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-plotdata-scatter.R
\name{scattergl.dt}
\alias{scattergl.dt}
\title{Scatter Plot as data.table}
\usage{
scattergl.dt(
  data,
  variables,
  value = c("smoothedMean", "smoothedMeanWithRaw", "bestFitLineWithRaw", "density",
    "raw"),
  overlayValues = NULL,
  evilMode = c("noVariables", "allVariables", "strataVariables"),
  collectionVariablePlotRef = NULL,
  computedVariableMetadata = NULL,
  verbose = c(TRUE, FALSE)
)
}
\arguments{
\item{data}{data.frame to make plot-ready data for}

\item{variables}{veupathUtil::VariableMetadataList
sourceId and its position in the plot. Recognized plotRef values are 'xAxisVariable', 
'yAxisVariable', 'overlayVariable', 'facetVariable1' and 'facetVariable2'}

\item{value}{character indicating whether to calculate 'smoothedMean', 'bestFitLineWithRaw'
 or 'density' estimates (no raw data returned), alternatively 'smoothedMeanWithRaw' 
to include raw data with smoothed mean. Note only 'raw' is compatible with a continuous 
overlay variable.}

\item{overlayValues}{character vector providing overlay values of interest}

\item{evilMode}{String indicating how evil this plot is ('strataVariables', 'allVariables', 'noVariables')}

\item{verbose}{boolean indicating if timed logging is desired}
}
\value{
data.table plot-ready data
}
\description{
This function returns a data.table of  
plot-ready data with one row per group (per panel). Columns 
'seriesX' and 'seriesY' contain the raw data for the 
scatter plot. Column 'group' and 'panel' specify the group the 
series data belongs to. Optionally, columns 'smoothedMeanX', 
'smoothedMeanY' and 'smoothedMeanSE' specify the x, y and 
standard error respectively of the smoothed conditional mean 
for the group. Columns 'densityX' and 'densityY' contain the 
calculated kernel density estimates. Column 
'seriesGradientColorscale' contains values to be used with a 
gradient colorscale when plotting.
}
\section{Evil Mode}{

An `evilMode` exists. It will do the following: \cr
- when `strataVariables` it will return 'no data' as a regular value for strata vars but will discard such cases for the axes vars. \cr
- when `allVariables` it will return 'no data' as a regular value for all variables. \cr
- when `noVariables` it will do the sensible thing and return complete cases only. \cr
- not return statsTables \cr
- allow smoothed means and agg values etc over axes values where we have no data 
for the strata vars \cr
- return a total count of plotted incomplete cases \cr
- represent missingness poorly, conflate the stories of completeness and missingness, 
mislead you and steal your soul \cr
}

\examples{
# Construct example data
df <- data.table('entity.xvar' = rnorm(100),
                 'entity.yvar' = rnorm(100),
                 'entity.overlay' = sample(c('red','green','blue'), 100, replace=T), stringsAsFactors = F)

# Create VariableMetadataList that specifies variable role in the plot and supplies variable metadata
variables <- veupathUtils::VariableMetadataList(
  veupathUtils::VariableMetadata(
    variableClass = veupathUtils::VariableClass(value = 'native'),
    variableSpec = veupathUtils::VariableSpec(variableId = 'xvar', entityId = 'entity'),
    plotReference = veupathUtils::PlotReference(value = 'xAxis'),
    dataType = veupathUtils::DataType(value = 'NUMBER'),
    dataShape = veupathUtils::DataShape(value = 'CONTINUOUS')
  ),
  veupathUtils::VariableMetadata(
    variableClass = veupathUtils::VariableClass(value = 'native'),
    variableSpec = veupathUtils::VariableSpec(variableId = 'overlay', entityId = 'entity'),
    plotReference = veupathUtils::PlotReference(value = 'overlay'),
    dataType = veupathUtils::DataType(value = 'STRING'),
    dataShape = veupathUtils::DataShape(value = 'CATEGORICAL')
  ),
  veupathUtils::VariableMetadata(
    variableClass = veupathUtils::VariableClass(value = 'native'),
    variableSpec = veupathUtils::VariableSpec(variableId = 'yvar', entityId = 'entity'),
    plotReference = veupathUtils::PlotReference(value = 'yAxis'),
    dataType = veupathUtils::DataType(value = 'NUMBER'),
    dataShape = veupathUtils::DataShape(value = 'CONTINUOUS')
  )
)
 
# Returns a data table with plot-ready data
dt <- scattergl.dt(df, map, value = 'bestFitLineWithRaw')
}
